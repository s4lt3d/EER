advisor.current$taxrate
source('~/EER2/advisor.R', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/advisor.R', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ee_sim.R', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
advisor(cnum)
advisor(26)
advisor(61)
?advisor
trace("advisor")
trace("advisor", edit=TRUE)
source('~/EER2/ai.r', echo=TRUE)
ac
ac <- advisor(cnum)
ac
cnum
cnum = 61
ac <- advisor(cnum)
ac$taxes
ac$taxrate
source('~/EER2/advisor.R', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
cnum <<- cnum
cnum
cnum=61
cnum <<- cnum
ac <- advisor(cnum)
ac <- mutate(ac, taxrate=as.integer(taxrate)/100, ps_tr=as.integer(ps_tr),
ps_j=as.integer(ps_j), ps_ta=as.integer(ps_ta), cnum=as.integer(cnum),
protection=as.integer(protection)) # bug
server <- getServer()
ac
ac$taxrate
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
cnum = 61
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
getInfo()
server <- getServer()
get.advisor(cnum)
cnum
cnum <<- 61
cnum <<- cnum
ac <- advisor(cnum)
ac <- mutate(ac, taxrate=as.integer(taxrate)/100, ps_tr=as.integer(ps_tr),
ps_j=as.integer(ps_j), ps_ta=as.integer(ps_ta), cnum=as.integer(cnum),
protection=as.integer(protection)) # bug
server <- getServer()
advisor.current <<- tbl_df(cbind(ac, distinct(select(server, -cnum_list)), setNames(tbl_dt(as.numeric(as.POSIXct(Sys.time()))), c('local.time'))))
advisor.current <- mutate(advisor.current, countries_allowed=as.integer(countries_allowed))
if(file.exists("EE_History.csv")){
write.table(advisor.current, file="EE_History.csv", sep=",", append = TRUE, col.name=FALSE, row.names = FALSE)
} else {
write.table(advisor.current, file="EE_History.csv", sep=",", append = TRUE, col.name=TRUE, row.names = FALSE)
}
if(!exists("advisor.history"))
{
advisor.history <<- advisor.current
}
advisor.history <<- bind_rows(advisor.history, advisor.current)
source('~/EER2/advisor.R', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
get.advisor(61)
cnum
ac <- advisor(cnum)
ac <- mutate(ac, taxrate=as.integer(taxrate)/100, ps_tr=as.integer(ps_tr),
ps_j=as.integer(ps_j), ps_ta=as.integer(ps_ta), cnum=as.integer(cnum),
protection=as.integer(protection)) # bug
server <- getServer()
advisor.current <<- tbl_df(cbind(ac, distinct(select(server, -cnum_list)), setNames(tbl_dt(as.numeric(as.POSIXct(Sys.time()))), c('local.time'))))
advisor.current <- mutate(advisor.current, countries_allowed=as.integer(countries_allowed))
if(file.exists("EE_History.csv")){
write.table(advisor.current, file="EE_History.csv", sep=",", append = TRUE, col.name=FALSE, row.names = FALSE)
} else {
write.table(advisor.current, file="EE_History.csv", sep=",", append = TRUE, col.name=TRUE, row.names = FALSE)
}
if(!exists("advisor.history"))
{
advisor.history <<- advisor.current
}
advisor.history <<- bind_rows(advisor.history, advisor.current)
advisor.current
advisor.current$pro_spy
server <- getServer()
sever
server
old.par <- par(mfrow=c(3, 4))
cnum <<- cnum
ac <- advisor(cnum)
ac <- mutate(ac, taxrate=as.integer(taxrate)/100, ps_tr=as.integer(ps_tr),
ps_j=as.integer(ps_j), ps_ta=as.integer(ps_ta), cnum=as.integer(cnum),
protection=as.integer(protection)) # bug
server <- getServer()
advisor.current <<- tbl_df(cbind(ac, distinct(select(server, -cnum_list)), setNames(tbl_dt(as.numeric(as.POSIXct(Sys.time()))), c('local.time'))))
advisor.current <- mutate(advisor.current, countries_allowed=as.integer(countries_allowed))
if(file.exists("EE_History.csv")){
write.table(advisor.current, file="EE_History.csv", sep=",", append = TRUE, col.name=FALSE, row.names = FALSE)
} else {
write.table(advisor.current, file="EE_History.csv", sep=",", append = TRUE, col.name=TRUE, row.names = FALSE)
}
if(!exists("advisor.history"))
{
advisor.history <<- advisor.current
}
advisor.history <<- bind_rows(advisor.history, advisor.current)
advisor.current
source('~/EER2/ai.r', echo=TRUE)
cnum <<- cnum
ac <- advisor(cnum)
cnum
source('~/EER2/advisor.R', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
createCountry()
source('~/EER2/ai.r', echo=TRUE)
createCountry()
source('~/EER2/ai.r', echo=TRUE)
cnum
cnum
cnum
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
government.Theocracy()
print(paste("Playing", cnum, "Turn", advisor.current$turns_played))
print(paste("Playing", cnum, "Turn", advisor.current$turns_played))
repeat
{
server <- getServer()
for(cnum in server$cnum_list[[1]][1:5]) # play only the first 5 countries
{
}
}
cnum = 62
government.Theocracy()
print(paste("Playing", cnum, "Turn", advisor.current$turns_played))
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
state <- Initialize.State()
state$land
state <- state %>% mutate(land = 10017
state <- state %>% mutate(land = 10017)
state <- state %>% mutate(land = 10017)
state <- Calc.Explore.Rate(state)
test <- state %>% filter(explore.rate == 11)
state$explore.rate
state$land
explore.rate <- max(select(filter(explore.rates, land > state$land, gov == "O"), rate))
explore.rate
if(state$government == 'R'){
explore.rate <- max(select(filter(explore.rates, land > state$land, gov == "R"), rate))
}
explore.rate
state <- state %>% mutate(explore.rate = explore.rate)
state$explore.rate
explore.rate
source('~/EER2/ee_sim.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim.R', echo=TRUE)
state <- Initialize.State()
state$buildings.per.turn
state$construction.zones
state$buildings.per.turn
state$construction.cost
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
source('~/EER2/ee_sim_unit_test.R', echo=TRUE)
state <- Initialize.State()
state <- Build(farms = state$buildings.per.turn)
state <- Build(state, farms = state$buildings.per.turn)
state$buildings.per.turn
state <- Initialize.State()
source('ee_sim.R')
state <- Initialize.State()
state <- Build(state, farms = state$buildings.per.turn)
state$land
state
state <- Initialize.State()
state$construction.cost * 5
state$money
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
state$success
state
source('~/EER2/ee_sim.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
state$success
state$empty.land
state$success <- FALSE
total <- sum(enterprize +  residences +  industrial +  military + research + farms + oil.rigs + construction)
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ee_sim.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
state$success
source('ee_sim.R')
debugSource('~/EER2/ai_sim_main.R', echo=TRUE)
total
state$empty.land
state$empty.land < total
debugSource('~/EER2/ai_sim_main.R', echo=TRUE)
debugSource('~/EER2/ai_sim_main.R', echo=TRUE)
state$construction.cost
state$construction.cost * total
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
state <- Explore(state)
printState(state)
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
state <- Initialize.State(61)
printState(state)
state <- Build(state, farms = state$buildings.per.turn)
state
colnames(state)
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
6692 - 5504
5504*1.2
5504*0.2
5504*0.2 + 5504
5504*0.25 + 5504
5942*1.2
-118
5942*1.2 - 118
5942*1.2 - 438
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
state
con = dbConnect(drv="SQLite", dbname="country.sqlite")
library(RSQLite)
con = dbConnect(drv="SQLite", dbname="country.sqlite")
con = dbConnect(drv="SQLite", dbname="country.sqlite")
dbCon <- dbConnect(drv="SQLite", dbname="country.sqlite")
?dbConnect
dbCon <- dbConnect("SQLite", dbname="country.sqlite")
dbCon <- dbConnect(SQLite(), dbname="country.sqlite")
dbCon
dbCon <- dbConnect(SQLite(), dbname="country.sqlite")
dbListTables(con)
dbListTables(dbCon)
state <- Initialize.State(61)
source('ee_sim.R')
source('print_state.R')
state <- Initialize.State(61)
printState(state)
library(dplyr)
library(RSQLite)
DB <- dbConnect(SQLite(), dbname = "country.sqlite")
state
copy_to
copy_to(DB, state, "SimState", temporary=FALSE)
my_db <- scr_sqlite("country.sqlite", create=TRUE)
my_db <- src_sqlite("country.sqlite", create=TRUE)
my_db
copy_to(my_db, state, "SimState", temporary=FALSE)
?db_insert_into
copy_to(my_db, state, "SimState", temporary=FALSE)
state
db_insert_into(my_db$con, values=state, table="SimState", temporary=FALSE)
state
state <- rbind(state, state)
state
collect(state)
state
compute(state)
collapse(state)
collect(state)
copy_to(my_db, state, "SimState", temporary=FALSE)
state <-combine(state, state)
state
state
copy_to(my_db, state, "SimState", temporary=FALSE)
compute(state)
collapse(state)
collect(state)
DB <- dbConnect(SQLite(), dbname = "country.sqlite")
my_db <- src_sqlite("country.sqlite", create=TRUE)
tbl(my_db)
tbl(my_db, "country.sqlite")
tbl.src_sqlite("country.sqlite")
src_sqlite("country.sqlite")
state
state <- Initialize.State(61)
state
DB <- dbConnect(SQLite(), dbname = "country.sqlite")
my_db <- src_sqlite("country.sqlite", create=TRUE)
copy_to(my_db, state, "SimState", temporary=FALSE)
state
new_state <- tbl(my_db, "SimState")
new_state
new_state <- rbind(new_state, new_state)
new_state
new_state <- tbl(my_db, "SimState")
new_state
collect(new_State)
collect(new_state)
new_state$cnum <- 60
collect(new_state)
new_state
new_state$cnum <- 60
new_state
new_state$cnum <- 60
new_state
new_state$cnum <- 60
mutate(new_state, cnum = 60)
new_state
collect(new_state)
collapse(new_state)
new_state <- mutate(new_state, cnum = 60)
new_state
new_state <- mutate(new_state, cnum = 60)
new_State
new_state
new_state$cnum <- 60
new_State
new_state
sessionInfo(dplyr)
sessionInfo(new_state)
new_State
new_state
new_state <- mutate(new_state, cnum = 60)
new_state
new_state
collect(new_state)
compute(new_state)
new_state <- mutate(new_state, cnum2 = 60)
collect(new_State)
collect(new_state)
new_state <- mutate(new_state, cnum3 = 60)
compute(new_state)
collapse(new_state)
new_state <- tbl(my_db, "SimState")
new_state
new_state <- mutate(new_state, cnum = replace(cnum, cnum==61))
new_state
new_state <- mutate(new_state, cnum = replace(cnum, cnum==61))
new_state
new_state <- mutate(new_state, cnum = replace(cnum, cnum==61, NA))
new_state
new_state <- tbl(my_db, "SimState")
new_state <- mutate(new_state, cnum = replace(cnum, cnum==61, NA))
new_state
new_state <- do(new_state, cnum = 60 )
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/print_state.R', echo=TRUE)
source('~/EER2/ee_sim.R', echo=TRUE)
s <- Initialize.State(61)
printState(s)
source('~/EER2/ee_sim.R', echo=TRUE)
s <- Initialize.State(61)
state <- Initialize.State(61)
s <- Initialize.State(61)
printState(s)
source('~/EER2/print_state.R', echo=TRUE)
printState(s)
s <- Sync.State(s)
source('~/EER2/ee_sim.R', echo=TRUE)
s <- Sync.State(s)
advisor(61)
params <- default.params
params$api_function <- "advisor"
params$cnum <- cnum
cnum
res <- doPOST(params)
res
res <- doPOST(params)
source('~/EER2/web.r', echo=TRUE)
params <- default.params
params$api_function <- "advisor"
params$cnum <- cnum
res <- doPOST(params)
res
res$sdf
source('~/EER2/ee_sim.R', echo=TRUE)
adv <- advisor(61)
adv
advisor(61)
source('~/EER2/web.r', echo=TRUE)
advisor(61)
for(i in 1:35) createCountry()
source('~/EER2/ai_sim_main.R', echo=TRUE)
state
state <- Initialize.State(36)
state
state <- Sync.State(state)
state
source('~/EER2/ee_sim.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
adv
adv <- advisor(36)
print(adv)
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
adv
adv$tot_j
adv$pt_ms
adv$pt_spi
adv$pt_war
adv$taxes
adv$t_tot
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
adv$taxrate
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
adv
adv$pt_ms
adv$pt_war
adv$ps_tr
adv$pro_tu
adv$ps_tr
adv$g_tax
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai.r', echo=TRUE)
source('~/EER2/ai_sim_main.R', echo=TRUE)
state <- Initialize.State(36)
printState(state)
state <- Sync.State(state)
state <- Initialize.State(36)
printState(state)
state <- Sync.State(state)
getServer()
getServer()$alive
getServer()$cnum_list
state
source('~/EER2/ai_sim_main.R', echo=TRUE)
install.packages('RODBC')
library("stats")
state <- Initialize.State(36)
printState(state)
source('ee_sim.R')
source('print_state.R')
con <- dbConnect(RSQLite::SQLite(), dbname="state.sqlite")
dbListTables(con)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), dbname="state.sqlite")
#dbSendQuery(conn = con, "DROP TABLE IF EXISTS states")
dbListTables(con)
state <- Initialize.State(36)
printState(state)
for(i in 1:80){
state <- Build(state, construction = 1)
#dbWriteTable(conn=con, name="states", as.data.frame(state), row.names = FALSE, append=TRUE)
}
printState(state)
?pmin
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
source('~/EER2/cpp_test.R', echo=TRUE)
